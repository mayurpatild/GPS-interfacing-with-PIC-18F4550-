//JAI SHRI RAM!!!
#include<p18f4550.h>
#include<delays.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<usart.h> 


/*#pragma config PLLDIV=5     // (20 MHz crystal on PICDEM FS USB board)
#pragma config CPUDIV=OSC1_PLL2
#pragma config USBDIV=2     // Clock source from 96MHz PLL/2
#pragma config FOSC=HSPLL_HS   
#pragma config VREGEN=ON
#pragma config WDT=OFF
#pragma config PBADEN=OFF
#pragma config LVP=OFF   */
//#define Channel0 0b00000100   



#pragma config FOSC=HS    // IRCIO67 (20 MHz crystal on PICDEM FS USB board)
#pragma config PWRT=OFF
#pragma config WDT=OFF
#pragma config PBADEN=OFF
#pragma config LPT1OSC=OFF
#pragma config LVP=OFF
#define LCD_DATA    PORTD               //LCD data port
#define ctrl        PORTE               //LCD signal port
#define en          PORTEbits.RE2      // enable signal
#define rw          PORTEbits.RE1      // read/write signal
#define rs          PORTEbits.RE0     // register select signal
#define BUSY        PORTDbits.RD7    

void TXbyte(char data);
void myMsDelay (unsigned int time);
void LCD_cmd(unsigned char cmd);
void init_LCD(void);
void LCD_write(unsigned char data);
void LCD_write_string(static char *str);
//unsigned char rx_data(void);
//unsigned char DataRdyUSART();
void getsUSART ( char * buffer,unsigned char len );
void OpenUSART( unsigned char config,unsigned int spbrg);
char ReadUART( void );

void TXbyte(char data)
{
 while(TXSTAbits.TRMT==0);
 TXREG = data;
}

void main()
{

int i;
//char str[40] = "$GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,*47";
  //char str3[30] = "$GPGLL,2447.2073,N,12100.5022,E,104548.04,A";
    char s[2] = ",";
    char *token;
    char *save[14];
    unsigned char gpgga[70];
    int data=0;
    unsigned char str1[]={"Ln:"};
    unsigned char str2[]={"Lt:"};
    unsigned  char  val;
 unsigned char  temp=0;

 ADCON1 = 0x0F;        //Configuring the PORTE pins as digital I/O 
 TRISD = 0x00;         //Configuring PORTD as output
 TRISE = 0x00;         //Configuring PORTE as output
// CONFIG1H=0x06;
 //PIE1=0x20;

/*OpenUSART( USART_TX_INT_OFF & USART_RX_INT_OFF & USART_ASYNCH_MODE & USART_EIGHT_BIT & USART_CONT_RX & USART_BRGH_HIGH,
             416 );*/
/*baudUSART (BAUD_IDLE_CLK_HIGH &
BAUD_16_BIT_RATE &
BAUD_WAKEUP_ON &
BAUD_AUTO_ON);*/
          // 207 because formula 15.1 yields (32000000/4800/16)-1 = 416.66
          // actual buad rate is 32000000/(16*(416+1)) = 4788.50 baud rate
	
 SSPCON1 = 0;        //  SPI is disabled	
 TRISCbits.TRISC7=1; // RX
 TRISCbits.TRISC6=1; // TX
 TRISBbits.TRISB0=0;
 TRISBbits.TRISB6=0;
 TRISBbits.TRISB5=0;
 TRISBbits.TRISB2=0;

 SPBRG  = 0x08;     // 0x0208 for 20MHz -> 9600 baud XTAL=20MHz, Fosc=20MHz 
 SPBRGH = 0x02;

//OSCCON=0x72;
//OSCTUNE=0x00;
 //SPBRG = 0xA0;
 //SPBRGH = 0x01;      // 0x0270 for 48MHz -> 19200 baud XTAL=20MHz, Fosc=48Mhz 
 TXSTA = 0x24;       // TX enable BRGH=1
 RCSTA = 0x90;       // continuous RX
//RCSTAbits.CREN=1;
 BAUDCON = 0x08;     // BRG16 = 1
// SPBRG=0x1A;
 temp = RCREG;       // Empty buffer
 temp = RCREG;       // Empty buffer
 init_LCD();
 LCD_cmd (0x80);

while(1)
{
      RCSTA = 0x90; 
      while(!DataRdyUSART());
      val=getcUSART();
      if(val=='$')
     {
      getsUSART(gpgga,70);
     PORTBbits.RB5=~PORTBbits.RB5;
     PORTBbits.RB6=RCSTAbits.OERR;
     PORTBbits.RB0=RCSTAbits.FERR;
      
      if (gpgga[0] == 'G' && gpgga[2] == 'G' && gpgga[3] == 'G' )
     {
     	  i=0;
      token=strtok(gpgga,s);
      
      while(token !=NULL ) 
     {
       PORTBbits.RB2=~PORTBbits.RB2;
       save[i]=token;        
       token=strtok(NULL, s);
       i++;
      }
    
      strcat(save[2],save[3]);
      strcat(save[4],save[5]);
       LCD_cmd(0x80);
       for(i=0;str2[i]!=0;i++)
      {
        LCD_write(str2[i]);
      }
      while(*save[2]!='\0')
 	{
	    LCD_write (*save[2]);
        save[2]++;
 	}
     LCD_cmd(0xC0);
     for(i=0;str1[i]!=0;i++)
     {
       LCD_write(str1[i]); 
     }
     while(*save[4]!='\0')
 	{
	   LCD_write(*save[4]);
        save[4]++;
 	}
		}
   
     if(RCSTAbits.OERR)
       {
      RCSTAbits.CREN=0;
    }  
  }
}

}
  

void myMsDelay (unsigned int time)
{
	unsigned int i, j;
	for (i = 0; i < time; i++)
		for (j = 0; j < 50; j++);
}

// Function to initialise the LCD
void init_LCD(void)
{
    LCD_cmd(0x38);      // initialization of 16X2 LCD in 8bit mode
    myMsDelay(15);

    LCD_cmd(0x01);      // clear LCD
    myMsDelay(15);

    LCD_cmd(0x0C);      // cursor off
    myMsDelay(15);

    LCD_cmd(0x80);      // ---8 go to first line and --0 is for 0th position
    myMsDelay(15);

    

    return;
}

void LCD_cmd(unsigned char cmd)
{
    LCD_DATA = cmd;
    rs = 0;
    rw = 0;
    en = 1;
    myMsDelay(1);
    en = 0;
    myMsDelay(1);
    return;
}


void LCD_write(unsigned char data)
{
    LCD_DATA = data;
    rs = 1;
    rw = 0;
    en = 1;
    myMsDelay(1);
    en = 0;
    //myMsDelay(10);
    return ;
}

void LCD_write_string(static char *str)   //store address value of the string in pointer *str
{
    int i = 0;
    while (str[i] != 0)
    {
        LCD_write(str[i]);      // sending data on LCD byte by byte
        myMsDelay(1);
                i++;
    }
    return;
}

